// /frontend/js/perfil.js

// ‚ö†Ô∏è Aseg√∫rate de que apiFetch est√° cargado desde api.service.js antes de este script

const profileForm = document.getElementById('profileForm');
const editBtn = document.getElementById('editBtn');
const logoutBtn = document.getElementById('logoutBtn');
const passwordInput = document.getElementById('contrasena');
const togglePassBtn = document.getElementById('togglePass');

// Elementos de la tarjeta lateral y del formulario
const sideNombre = document.getElementById('sideNombre');
const sideCorreo = document.getElementById('sideCorreo');
const sideRol = document.getElementById('sideRol');
const metaUserId = document.getElementById('metaUserId');
const inputNombre = document.getElementById('nombre');
const inputCorreo = document.getElementById('correo');
const selectRol = document.getElementById('rol');

let isEditing = false; // Estado para controlar el modo edici√≥n

// -----------------------------------------------------------------
// 1. L√ìGICA DE CARGA DE DATOS
// -----------------------------------------------------------------

/**
 * Rellena el formulario y la tarjeta lateral con los datos del usuario.
 * @param {object} userData - Datos del usuario (asumimos: { id_usuario, nombre, correo, rol })
 */
function fillProfile(userData) {
    if (!userData) return;

    // Rellenar tarjeta lateral
    sideNombre.textContent = userData.nombre || 'N/A';
    sideCorreo.textContent = userData.correo || 'N/A';
    sideRol.textContent = userData.rol || 'N/A';
    metaUserId.textContent = userData.id_usuario || 'N/A';
    
    // Rellenar formulario principal
    inputNombre.value = userData.nombre || '';
    inputCorreo.value = userData.correo || '';
    selectRol.value = userData.rol || '';
    
    // La contrase√±a siempre se muestra como oculta por seguridad
    passwordInput.value = '********';
}

/**
 * Carga los datos del usuario actual desde la API.
 */
async function loadUserData() {
    try {
        const url = '/usuarios/perfil'; 
        
        // üîë CORRECCI√ìN: Capturamos la respuesta completa y extraemos 'data'
        const respuestaCompleta = await apiFetch(url, { method: 'GET' });
        const userData = respuestaCompleta.data || respuestaCompleta; // Fallback por si la API cambia
        
        if (!userData || !userData.id_usuario) {
             throw new Error('No se encontraron datos de usuario en la respuesta de la API.');
        }

        fillProfile(userData);
    } catch (error) {
        console.error('Error al cargar el perfil:', error);
        alert('No se pudieron cargar los datos del perfil. La sesi√≥n puede haber expirado o hay un problema con la API.');
    }
}

// -----------------------------------------------------------------
// 2. L√ìGICA DE EDICI√ìN Y ACTUALIZACI√ìN
// -----------------------------------------------------------------

/**
 * Alterna entre el modo 'ver' y 'editar'.
 */
function toggleEditMode() {
    isEditing = !isEditing;

    // Campos a alternar (Nombre y Correo)
    inputNombre.readOnly = !isEditing;
    inputCorreo.readOnly = !isEditing;
    
    if (isEditing) {
        editBtn.textContent = 'üíæ Guardar Cambios';
        editBtn.classList.add('btn-primary');
        editBtn.onclick = handleUpdateProfile; // Asignar la funci√≥n de guardar
    } else {
        editBtn.textContent = '‚úé Editar';
        editBtn.classList.remove('btn-primary');
        editBtn.onclick = toggleEditMode; // Reasignar la funci√≥n de alternar
        loadUserData(); // Recargar datos para descartar cambios no guardados
    }
}

/**
 * Maneja la actualizaci√≥n del perfil (Nombre y Correo)
 */
async function handleUpdateProfile() {
    // Desactivar el bot√≥n para evitar doble env√≠o
    editBtn.disabled = true;
    editBtn.textContent = 'Guardando...'; 

    const newNombre = inputNombre.value;
    const newCorreo = inputCorreo.value;

    try {
        const payload = {
            nombre: newNombre,
            correo: newCorreo,
        };

        const respuestaCompleta = await apiFetch('/usuarios/perfil', {
            method: 'PATCH',
            body: JSON.stringify(payload),
        });
        
        // üîë CORRECCI√ìN: Extraemos 'data' tambi√©n en la respuesta de actualizaci√≥n
        const updatedData = respuestaCompleta.data || respuestaCompleta;

        alert('Perfil actualizado exitosamente.');
        fillProfile(updatedData); 
        toggleEditMode(); // Volver a modo visualizaci√≥n

    } catch (error) {
        console.error('Error al actualizar el perfil:', error);
        alert(`Error al actualizar el perfil: ${error.message || 'Verifique los datos.'}`);

    } finally {
        editBtn.disabled = false;
    }
}


/**
 * üîë FUNCI√ìN PARA CAMBIAR LA CONTRASE√ëA
 * Se recomienda implementar un modal que pida los 3 campos.
 */
function handlePasswordChange() {
    alert("Para cambiar la contrase√±a, usa un modal pidiendo la Contrase√±a Actual, Nueva Contrase√±a y Confirmar Nueva Contrase√±a. La l√≥gica de env√≠o debe usar la ruta: PATCH /usuarios/cambiar-password");
}


// -----------------------------------------------------------------
// 3. OTRAS ACCIONES
// -----------------------------------------------------------------

/**
 * Muestra/Oculta el texto de la contrase√±a si se hace clic.
 */
togglePassBtn.addEventListener('click', () => {
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        togglePassBtn.textContent = 'üîí';
    } else {
        passwordInput.type = 'password';
        togglePassBtn.textContent = 'üëÅÔ∏è';
    }
});


/**
 * Maneja el cierre de sesi√≥n.
 */
logoutBtn.addEventListener('click', () => {
    if (confirm('¬øEst√°s seguro de que quieres cerrar la sesi√≥n?')) {
        localStorage.removeItem('jwt_token');
        window.location.href = '/frontend/Vista/login.html';
    }
});


// -----------------------------------------------------------------
// 4. INICIALIZACI√ìN
// -----------------------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {
    loadUserData();
    editBtn.onclick = toggleEditMode; // Inicializa el bot√≥n en modo "editar"
    
    // Asocia un evento para manejar el cambio de contrase√±a (ejemplo: si haces clic en el campo)
    passwordInput.addEventListener('click', handlePasswordChange);
});