// src/modules/movimiento/entities/movimiento.entity.ts (Corregido y Optimizado)

import {
Â  Entity,
Â  PrimaryGeneratedColumn,
Â  Column,
Â  ManyToOne,
Â  JoinColumn,
Â  CreateDateColumn,
} from 'typeorm';
import { InstrumentoQuirurgico } from '../../instrumento-quirurgico/entities/instrumento-quirurgico.entity';
import { Usuario } from '../../usuario/entities/usuario.entity';

@Entity('movimientos_inventario')
export class MovimientoInventario {
Â  @PrimaryGeneratedColumn()
Â  id_movimiento: number;

Â  @Column({ type: 'int' })
Â  cantidad: number;

Â  @Column({ type: 'varchar', length: 10 }) // Limita el tamaÃ±o de la cadena
Â  tipo_movimiento: string; // 'entrada' o 'salida'

  // ðŸ”‘ CORRECCIÃ“N/VERIFICACIÃ“N DE PRECIO: Aseguramos el tipo decimal si usas centavos.
  // Si solo usas enteros, 'int' estÃ¡ bien, pero 'decimal' es mÃ¡s seguro para dinero.
Â  @Column({ type: 'decimal', precision: 10, scale: 2 })
Â  precio: number; // Precio de la transacciÃ³n (unitario * cantidad)

Â  @CreateDateColumn({ type: 'timestamp' })
Â  fecha: Date;

Â  // RELACIONES (Estas parecen correctas con los nombres de columna que definiste en la DB)

Â  @ManyToOne(() => Usuario, { eager: true, nullable: false }) // nullable: false para asegurar FK
Â  @JoinColumn({ name: 'id_usuario' })
Â  usuario: Usuario;

Â  @ManyToOne(() => InstrumentoQuirurgico, { eager: true, nullable: false }) // nullable: false para asegurar FK
Â  @JoinColumn({ name: 'id_instrumento' })
Â  instrumento: InstrumentoQuirurgico;
}